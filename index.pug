doctype html
html
  head
      title Lets talk about ... Example
      meta(charset='utf-8')
      script
        | window.PERMANENT_URL_PREFIX = window.PERMANENT_URL_PREFIX || 'node_modules/lets-talk-about--template/assets/vendor/';
      script(src='node_modules/lets-talk-about--template/assets/vendor/slides.js')
      link(href='styles.css'  rel='stylesheet' type='text/css')
  body
    section.slides.layout-regular.template-default
      article
        h1 New in JS
      article
        h1 Arrow functions
      article
        h2 Basic Example
        ul.build
          li
            pre
              | odds  = evens.map(function (v) {
              |   return v + 1;
              | });
          li
            pre
              | odds  = evens.map(v => v + 1);
      article
        h2 Multiple parameters
        ul.build
          li
            pre
              | nums = numbers.map(function (v, i) {
              |   return v + i;
              | });
          li
            pre
              | nums  = numbers.map((v, i) => v + i);
      article
        h2 Multiple actions
        ul.build
          li
            pre
              | let shift = false;
              | shiftPartial = numbers.map(v => {
              |   shift = !shift;
              |   return shift ? v + 1 : v;
              | });
      article
        h2 It's a Trap
        ul.build
          li
            pre
              | obj = values.map(v => { [v]: v });
      article
        h2 It can be a Trap
        ul
          li
            pre
              | obj = values.map(v => { [v]: v });
          li
            pre
              | obj = values.map(v => ({ [v]: v }));
      article
        h1 Promises
        ul.build
          li
            pre
              | function timeout(duration = 0) {
              |   return new Promise((resolve, reject) => {
              |     setTimeout(resolve, duration);
              |   });
              | }
      article
        h1 Async & Await
        ul.build
          li
            pre
              | async function work() {
              |   await timeout(10000);
              |   console.log('done');
              | }
              |
              | work();
      article
        h1 Rest Parameter
      article
        h2 ES 5
      article
        h2 ES 5
        ul.build
          li
            pre
              | function f (x, y) {
              |   var a = Array.prototype.slice.call(
              |     arguments, 2
              |   );
              |   return (x + y) * a.length;
              | };
              | f(1, 2, "hello", true, 7) === 9;
      article
        h2 ES 6
        ul.build
          li
            pre
              | function f (x, y, ...a) {
              |   return (x + y) * a.length;
              | }
              | f(1, 2, "hello", true, 7) === 9;
      article
        h1 Template literals
      article
        h2 ES 5
        ul.build
          li
            pre
              | console.log(
              |   "Hello " + firstName + ",\n" +
              |   "greetings from GLaDOS"
              | );
      article
        h2 ES 6
        ul.build
          li
            pre
              | console.log(`
              |   Hello ${firstName},
              |   greetings from GLaDOS
              | `);
      article
        h2 Its a trap
        ul.build
          li
            pre
              | \n
              | \tHello ${firstName},\n
              | \tgreetings from GLaDOS\n
      article
        h2 It can be a trap
        ul.build
          li
            pre
              | console.log(dedent`
              |   Hello ${firstName},
              |   greetings from GLaDOS
              | `);
      article
        h1 Iterators
      article
        h2 ES 5
        ul.build
          li
            pre
              | function fibonacci(n) {
              |   if (n <= 1) return 1;
              |   return
              |     fibonacci(n - 1) +
              |     fibonacci(n - 2)
              |   ;
              | }
      article
        h2 ES 5
        ul.build
          li
            pre
              | function fibonacci(n) {
              |   if (n <= 1) return 1;
              |   return
              |     fibonacci(n - 1) +
              |     fibonacci(n - 2)
              |   ;
              | }
      article
        h2 ES 6 Iterable
        ul.build
          li
            pre
              | let fibonacci = {
              |   [Symbol.iterator]() {
              |     let pre = 0, cur = 1
              |     return {
              |       next () {
              |         [ pre, cur ] = [ cur, pre + cur ];
              |         return { done: false, value: cur };
              |       },
              |     };
              |   },
              | };
      article
        h2 ES 6 Iterable Usage
        ul.build
          li
            pre
              | for (let n of fibonacci) {
              |   if (n > 1000) break;
              |   console.log(n);
              | }
      article
        h1 Generators
      article
        h2 ES 6 Iterable
        ul.build
          li
            pre
              | let fibonacci = {
              |   [Symbol.iterator]() {
              |     let pre = 0, cur = 1
              |     return {
              |       next () {
              |         [ pre, cur ] = [ cur, pre + cur ];
              |         return { done: false, value: cur };
              |       },
              |     };
              |   },
              | };
      article
        h2 ES 6 Generator
        ul.build
          li
            pre
              | let fibonacci = {
              |   *[Symbol.iterator]() {
              |     let pre = 0, cur = 1
              |     for (;;) {
              |       [ pre, cur ] = [ cur, pre + cur ];
              |       yield cur;
              |     }
              |   },
              | };

    script(src='node_modules/lets-talk-about--template/assets/scripts/main.js')
